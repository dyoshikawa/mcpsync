import { existsSync, readFileSync, writeFileSync } from "node:fs";
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { gitignoreCommand } from "./gitignore.js";

vi.mock("node:fs");

const mockExistsSync = vi.mocked(existsSync);
const mockReadFileSync = vi.mocked(readFileSync);
const mockWriteFileSync = vi.mocked(writeFileSync);

describe("gitignoreCommand", () => {
  beforeEach(() => {
    vi.clearAllMocks();
    vi.spyOn(console, "log").mockImplementation(() => {});
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it("should create .gitignore with rules when file does not exist", async () => {
    mockExistsSync.mockReturnValue(false);

    await gitignoreCommand();

    expect(mockWriteFileSync).toHaveBeenCalledWith(
      expect.stringContaining(".gitignore"),
      expect.stringContaining("# Generated by rulesync")
    );
    expect(console.log).toHaveBeenCalledWith(
      expect.stringContaining("✅ .gitignoreに10個のルールを追加しました:")
    );
  });

  it("should append rules to existing .gitignore", async () => {
    const existingContent = "node_modules/\n*.log\n";

    mockExistsSync.mockReturnValue(true);
    mockReadFileSync.mockReturnValue(existingContent);

    await gitignoreCommand();

    expect(mockWriteFileSync).toHaveBeenCalledWith(
      expect.stringContaining(".gitignore"),
      expect.stringContaining(existingContent)
    );
    expect(mockWriteFileSync).toHaveBeenCalledWith(
      expect.stringContaining(".gitignore"),
      expect.stringContaining(".github/instructions/")
    );
  });

  it("should not add duplicate rules", async () => {
    const existingContent = `node_modules/
# Generated by rulesync - AI tool configuration files
.github/copilot-instructions.md
.github/instructions/
.cursor/rules/
.clinerules/
CLAUDE.md
.claude/memories/
.roo/rules/
GEMINI.md
.gemini/memories/
# Support for --base-dir option (any depth)
**/.github/copilot-instructions.md
**/.github/instructions/
**/.cursor/rules/
**/.clinerules/
**/CLAUDE.md
**/.claude/memories/
**/.roo/rules/
**/GEMINI.md
**/.gemini/memories/
`;

    mockExistsSync.mockReturnValue(true);
    mockReadFileSync.mockReturnValue(existingContent);

    await gitignoreCommand();

    expect(mockWriteFileSync).not.toHaveBeenCalled();
    expect(console.log).toHaveBeenCalledWith("✅ .gitignoreは既に最新です");
  });

  it("should add only missing rules to existing .gitignore", async () => {
    const existingContent = `node_modules/
**/.github/instructions/
`;

    mockExistsSync.mockReturnValue(true);
    mockReadFileSync.mockReturnValue(existingContent);

    await gitignoreCommand();

    expect(mockWriteFileSync).toHaveBeenCalledWith(
      expect.stringContaining(".gitignore"),
      expect.stringContaining(".cursor/rules/")
    );
    expect(mockWriteFileSync).toHaveBeenCalledWith(
      expect.stringContaining(".gitignore"),
      expect.stringContaining(".clinerules/")
    );
    expect(console.log).toHaveBeenCalledWith(
      expect.stringContaining("✅ .gitignoreに9個のルールを追加しました:")
    );
  });
});
